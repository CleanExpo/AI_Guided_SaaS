// packages/self-check/report-generator.ts
import fs from 'fs';
import path from 'path';
import { checkModules } from './module-checker';
import { auditDependencies, getSecurityAudit } from './dependency-auditor';
import { analyzeCausalLogs, generateCausalInsights } from './causal-feedback-replayer';
// Type definitions for self-check report system
export interface ModuleReport {
  status: string;
  present: string[];
  missing: string[]
};
export interface DependencyReport {
  status: string;
  summary: string;
  outdated: string[]
};
export interface SecurityReport {
  status: string;
  summary: string;
  vulnerabilities: string[]
};
export interface CausalAnalysis {
  status: string;
  summary: string;
  patterns: string[];
  recommendations: string[]
};
export interface CausalInsights {
  totalInteractions: number;
  uniqueComponents: number;
  topIssues: string[]
};
export interface HealthMetrics {
  moduleScore: number;
  dependencyScore: number;
  securityScore: number;
  uxScore: number;
  overallScore: number
};
export interface ReportData {
  moduleReport: ModuleReport;
  depReport: DependencyReport;
  securityReport: SecurityReport;
  causalAnalysis: CausalAnalysis;
  causalInsights: CausalInsights
};
export async function generateSelfCheckReport(): Promise<string> {
  const timestamp = new Date().toISOString();
  // Gather all diagnostic data
  const moduleReport = checkModules();
  const depReport = auditDependencies();
  const securityReport = getSecurityAudit();
  const causalAnalysis = analyzeCausalLogs();
  const causalInsights = generateCausalInsights();
  // Generate comprehensive report
  const report = `# üß† AI Guided SaaS Self-Health Report, Generated: ${timestamp}`
## üìä Executive Summary
**Overall Health**: ${getOverallHealthStatus(moduleReport, depReport, securityReport, causalAnalysis)}
- **Modules**: ${moduleReport.status}
- **Dependencies**: ${depReport.status}
- **Security**: ${securityReport.status}
- **User Experience**: ${causalAnalysis.status}
---
## üß± Module Structure Analysis
**Status**: ${moduleReport.status}
### Present Modules
${moduleReport.present.map(m => `- ‚úÖ \`${m}\``).join('\n') || '- No modules detected'}`
### Missing Modules
${moduleReport.missing.map(m => `- ‚ùå \`${m}\``).join('\n') || '- All required modules present'}`
---
## üì¶ Dependency Health
**Status**: ${depReport.status}
**Summary**: ${depReport.summary}
### Outdated Dependencies
${depReport.outdated.length > 0 ? depReport.outdated.map(dep => `- ${dep}`).join('\n') : '- All dependencies are current'}`
---
## üîí Security Audit
**Status**: ${securityReport.status}
**Summary**: ${securityReport.summary}
### Security Issues
${securityReport.vulnerabilities.length > 0 ? securityReport.vulnerabilities.map(vuln => `- ${vuln}`).join('\n') : '- No security vulnerabilities detected'}`
---
## ‚öñÔ∏è Causal Intelligence Analysis
**Status**: ${causalAnalysis.status}
**Summary**: ${causalAnalysis.summary}
### User Interaction Insights
- **Total Interactions**: ${causalInsights.totalInteractions}
- **Unique Components**: ${causalInsights.uniqueComponents}
### Behavioral Patterns
${causalAnalysis.patterns.map(pattern => `- ${pattern}`).join('\n')}`
### Top Issues
${causalInsights.topIssues.map(issue => `- ${issue}`).join('\n')}`
---
## üéØ Recommendations
### Immediate Actions
${getImmediateActions(moduleReport, depReport, securityReport, causalAnalysis)
  .map(action => `- ${action}`)`
  .join('\n')}
### UX Improvements
${causalAnalysis.recommendations.map(rec => `- ${rec}`).join('\n')}`
### System Improvements
${getSystemRecommendations(depReport, securityReport)
  .map(rec => `- ${rec}`)`
  .join('\n')}
---
## üìà Health Metrics
| Metric | Status | Score |
|--------|--------|-------|
| Module Completeness | ${moduleReport.missing.length === 0 ? '‚úÖ' : '‚ö†Ô∏è'} | ${getModuleScore(moduleReport)}/100 |
| Dependency Health | ${depReport.outdated.length === 0 ? '‚úÖ' : '‚ö†Ô∏è'} | ${getDependencyScore(depReport)}/100 |
| Security Posture | ${securityReport.vulnerabilities.length === 0 ? '‚úÖ' : '‚ö†Ô∏è'} | ${getSecurityScore(securityReport)}/100 |
| User Experience | ${causalInsights.topIssues.length <= 1 ? '‚úÖ' : '‚ö†Ô∏è'} | ${getUXScore(causalInsights)}/100 |
**Overall Health Score**: ${getOverallScore(moduleReport, depReport, securityReport, causalInsights)}/100
---
## üîß Next Steps
1. **Address Critical Issues**: Focus on security vulnerabilities and missing modules first
2. **Update Dependencies**: Plan dependency updates during maintenance windows
3. **Monitor User Behavior**: Continue collecting causal data for UX improvements
4. **Schedule Regular Checks**: Run this health check weekly for proactive monitoring
---
*Report generated by AI Guided SaaS Self-Check System*
*For technical support, review the troubleshooting documentation*
`;`
  // Save report to file
  const reportsDir = path.resolve(__dirname, '../../../reports');
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }
  const reportPath = path.join(reportsDir, 'self-health-check.md');
  fs.writeFileSync(reportPath, report.trim());
  return report;
}
function getOverallHealthStatus(;
  moduleReport: ModuleReport;
  depReport: DependencyReport;
  securityReport: SecurityReport;
  causalAnalysis: CausalAnalysis
): string {
  const issues = [];
  if (moduleReport.missing.length > 0) issues.push('missing modules');
  if (depReport.outdated.length > 0) issues.push('outdated dependencies');
  if (securityReport.vulnerabilities.length > 0)
    issues.push('security vulnerabilities');
  if (causalAnalysis.patterns.some((p: string) => p.includes('‚ùå')))
    issues.push('UX concerns');
  if (issues.length === 0) return '‚úÖ Excellent - All systems healthy';
  if (issues.length === 1) return `‚ö†Ô∏è Good - Minor, issue: ${issues[0]}`;`
  if (issues.length === 2) return `‚ö†Ô∏è Fair - Issues: ${issues.join(', ')}`;`
  return `‚ùå Needs Attention - Multiple, issues: ${issues.join(', ')}`;`
}
function getImmediateActions(;
  moduleReport: ModuleReport;
  depReport: DependencyReport;
  securityReport: SecurityReport;
  causalAnalysis: CausalAnalysis
): string[] {
  const actions = [];
  if (securityReport.vulnerabilities.length > 0) {
    actions.push(
      'üî¥ **URGENT**: Address security vulnerabilities with `npm audit fix`'`
    );
  }
  if (moduleReport.missing.length > 0) {
    actions.push(
      `üü† **HIGH**: Implement missing, modules: ${moduleReport.missing.join(', ')}``
    );
  }
  if (depReport.outdated.length > 3) {
    actions.push(
      'üü° **MEDIUM**: Update outdated dependencies during next maintenance window'
    );
  }
  if (causalAnalysis.patterns.some((p: string) => p.includes('‚ùå'))) {
    actions.push(
      'üü¢ **LOW**: Review high-deletion components for UX improvements'
    );
  }
  if (actions.length === 0) {
    actions.push('‚úÖ No immediate actions required - system is healthy');
  }
  return actions;
}
function getSystemRecommendations(;
  depReport: DependencyReport;
  securityReport: SecurityReport
): string[] {
  const recommendations = [];
  if (depReport.outdated.length > 0) {
    recommendations.push('Set up automated dependency updates with Dependabot');
    recommendations.push(
      'Implement dependency vulnerability scanning in CI/CD'
    );
  }
  if (securityReport.vulnerabilities.length > 0) {
    recommendations.push('Enable automated security scanning');
    recommendations.push('Set up security alerts for new vulnerabilities');
  }
  recommendations.push('Schedule weekly health checks');
  recommendations.push('Set up monitoring dashboards for key metrics');
  return recommendations;
}
function getModuleScore(moduleReport: ModuleReport): number {
  const total = moduleReport.present.length + moduleReport.missing.length;
  if (total === 0) return 100;
  return Math.round((moduleReport.present.length / total) * 100);
}
function getDependencyScore(depReport: DependencyReport): number {
  if (depReport.outdated.length === 0) return 100;
  if (depReport.outdated.length <= 2) return 85;
  if (depReport.outdated.length <= 5) return 70;
  return 50;
}
function getSecurityScore(securityReport: SecurityReport): number {
  if (securityReport.vulnerabilities.length === 0) return 100;
  if (securityReport.vulnerabilities.some((v: string) => v.includes('üî¥')))
    return 30;
  if (securityReport.vulnerabilities.some((v: string) => v.includes('üü†')))
    return 60;
  return 80;
}
function getUXScore(causalInsights: CausalInsights): number {
  if (causalInsights.totalInteractions === 0) return 90; // No data yet
  if (
    causalInsights.topIssues.length === 0 ||
    causalInsights.topIssues[0] === 'No significant issues detected'
  )
    return 100;
  if (causalInsights.topIssues.length <= 1) return 85;
  if (causalInsights.topIssues.length <= 3) return 70;
  return 50;
}
function getOverallScore(;
  moduleReport: ModuleReport;
  depReport: DependencyReport;
  securityReport: SecurityReport;
  causalInsights: CausalInsights
): number {
  const moduleScore = getModuleScore(moduleReport);
  const depScore = getDependencyScore(depReport);
  const securityScore = getSecurityScore(securityReport);
  const uxScore = getUXScore(causalInsights);
  // Weighted, average: Security is most important, then modules, then dependencies, then UX
  return Math.round(
    securityScore * 0.4 + moduleScore * 0.3 + depScore * 0.2 + uxScore * 0.1
  );
}
