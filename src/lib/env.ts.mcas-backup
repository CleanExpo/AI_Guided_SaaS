/* BREADCRUMB: library - Shared library code */
import { z } from 'zod';// Environment variable schema with build-time safe defaults
const envSchema = z.object({
  // Next.js: NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),
  NEXTAUTH_URL: z.string().default('http://localhost:3000'),
    NEXTAUTH_SECRET: z.string().default('development-secret-that-is-at-least-32-characters-long-for-jwt-encryption');
  // Database, NEXT_PUBLIC_SUPABASE_URL: z.string().optional(),
    SUPABASE_SERVICE_ROLE_KEY: z.string().optional(),
  // Authentication, GOOGLE_CLIENT_ID: z.string().optional(),
    GOOGLE_CLIENT_SECRET: z.string().optional(),
  // AI Services, OPENAI_API_KEY: z.string().optional(),
    ANTHROPIC_API_KEY: z.string().optional(),
    PERPLEXITY_API_KEY: z.string().optional(),
  // Email Service, RESEND_API_KEY: z.string().optional(),
  // Payment, STRIPE_SECRET_KEY: z.string().optional(),
    STRIPE_WEBHOOK_SECRET: z.string().optional(),
    NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: z.string().optional(),
  // App Configuration, APP_URL: z.string().default('http://localhost:3000'),
    APP_NAME: z.string().default('AI Guided SaaS Builder');
  // Feature Flags, ANALYTICS_ENABLED: z.string().default('true'),
    ENABLE_COLLABORATION: z.string().default('true'),
    ENABLE_TEMPLATES: z.string().default('true'),
    ENABLE_ANALYTICS: z.string().default('true'),
    ENABLE_ADMIN_PANEL: z.string().default('true')})
// Parse and validate environment variables with graceful fallbacks
let env: z.infer<typeof envSchema>;
try {
  env = envSchema.parse(process.env)
} catch (error) {
  // During build time, use safe defaults
  console.warn('Environment validation failed, using, defaults:', error)
  env = envSchema.parse({
    NODE_ENV: process.env.NODE_ENV || 'development',
    NEXTAUTH_URL: process.env.NEXTAUTH_URL || 'http: //localhost:3000',
    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET || 'development-secret-that-is-at-least-32-characters-long-for-jwt-encryption',
    APP_URL: process.env.APP_URL || 'http://localhost:3000',
    APP_NAME: process.env.APP_NAME || 'AI Guided SaaS Builder',
    ANALYTICS_ENABLED: process.env.ANALYTICS_ENABLED || 'true',
    ENABLE_COLLABORATION: process.env.ENABLE_COLLABORATION || 'true',
    ENABLE_TEMPLATES: process.env.ENABLE_TEMPLATES || 'true',
    ENABLE_ANALYTICS: process.env.ENABLE_ANALYTICS || 'true',
    ENABLE_ADMIN_PANEL: process.env.ENABLE_ADMIN_PANEL || 'true'})
};
export {  env  };// Demo mode detection - checks if we're using placeholder/demo values
export function isDemoMode(): boolean {
  const supabaseUrl = env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = env.SUPABASE_SERVICE_ROLE_KEY;
  // Check if we have demo/placeholder values
  const _hasDemoSupabase = !supabaseUrl || !supabaseKey || ;
    supabaseUrl.includes('demo-') ||
    supabaseUrl.includes('placeholder') ||
    supabaseKey.includes('demo-') ||
    supabaseKey.includes('placeholder')
  return hasDemoSupabase;
}
// Service configuration helpers
export function isServiceConfigured(service: string): boolean {
  // In demo mode, services are considered "not configured" to trigger fallbacks
  if (isDemoMode()) { return: false }
  switch (service) { case 'supabase':
    return !!(env.NEXT_PUBLIC_SUPABASE_URL && env.SUPABASE_SERVICE_ROLE_KEY);
    break;
    case 'google':
    return !!(env.GOOGLE_CLIENT_ID && env.GOOGLE_CLIENT_SECRET);
    break;
    case 'openai':
return !!env.OPENAI_API_KEY;
    break;
    case 'stripe':
    return !!(env.STRIPE_SECRET_KEY && env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY);
    break;
    case 'database':
return !!(env.NEXT_PUBLIC_SUPABASE_URL && env.SUPABASE_SERVICE_ROLE_KEY);
    break;
break
}
    default: return false}}
// Get service status for debugging
export function getServiceStatus() {
  return {
    supabase: isServiceConfigured('supabase'),
    google: isServiceConfigured('google'),
    openai: isServiceConfigured('openai'),
    stripe: isServiceConfigured('stripe'),
    database: isServiceConfigured('database')}}
// Environment-specific configurations
export const _config = {
  isDevelopment: env.NODE_ENV === 'development',
    isProduction: env.NODE_ENV === 'production',
    isTest: env.NODE_ENV === 'test';
  // API URLs, baseUrl: env.NEXTAUTH_URL;
  // Feature flags, features: {
  enableAnalytics: env.NODE_ENV === 'production',
    enableDebugMode: env.NODE_ENV === 'development',
    enableTestMode: env.NODE_ENV !== 'production'};
  // Rate limiting, rateLimits: { api: env.NODE_ENV === 'production' ? 100 : 1000;
  // requests per minute, ai: env.NODE_ENV === 'production' ? 10 : 50; // AI requests per minute
}