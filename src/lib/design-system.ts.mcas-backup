/* BREADCRUMB: library - Shared library code */
// Enhanced Design System for AI Guided SaaS
// Modern color palettes, glassmorphism effects, and design tokens
export const designTokens = {
  // Modern Color Palette - Sophisticated gradients and semantic colors, colors: {
    // Primary Brand Colors - Modern blue/purple gradient system, primary: {
  50: '#eff6ff',100: '#dbeafe',
      200: '#bfdbfe',
      300: '#93c5fd',
      400: '#60a5fa',
      500: '#3b82f6',
      600: '#2563eb',
      700: '#1d4ed8',
      800: '#1e40af',
      900: '#1e3a8a',
      950: '#172554'
    },
    // Secondary Purple Accent, secondary: {
      50: '#faf5ff',
      100: '#f3e8ff',
      200: '#e9d5ff',
      300: '#d8b4fe',
      400: '#c084fc',
      500: '#a855f7',
      600: '#9333ea',
      700: '#7c3aed',
      800: '#6b21a8',
      900: '#581c87',
      950: '#3b0764'
    },
    // Semantic Colors, success: {
      50: '#ecfdf5',
      500: '#10b981',
      600: '#059669',
      700: '#047857'
    },
    warning: {
      50: '#fffbeb',
      500: '#f59e0b',
      600: '#d97706',
      700: '#b45309'
    },
    error: {
      50: '#fef2f2',
      500: '#ef4444',
      600: '#dc2626',
      700: '#b91c1c'
    },
    info: {
      50: '#f0f9ff',
      500: '#06b6d4',
      600: '#0891b2',
      700: '#0e7490'
    },
    // Neutral Grays - Enhanced contrast, gray: {
      50: '#f8fafc',
      100: '#f1f5f9',
      200: '#e2e8f0',
      300: '#cbd5e1',
      400: '#94a3b8',
      500: '#64748b',
      600: '#475569',
      700: '#334155',
      800: '#1e293b',
      900: '#0f172a',
      950: '#020617'
},
  // Glassmorphism Effects, glass: {
    // Light glassmorphism, light: {
  background: 'rgba(255, 255, 255, 0.1)',
      border: 'rgba(255, 255, 255, 0.2)',
      shadow: '0 8px 32px rgba(31, 38, 135, 0.37)',
      backdropFilter: 'blur(8px)'
    },
    // Medium glassmorphism, medium: {
      background: 'rgba(255, 255, 255, 0.15)',
      border: 'rgba(255, 255, 255, 0.25)',
      shadow: '0 12px 40px rgba(31, 38, 135, 0.45)',
      backdropFilter: 'blur(12px)'
    },
    // Strong glassmorphism, strong: {
      background: 'rgba(255, 255, 255, 0.2)',
      border: 'rgba(255, 255, 255, 0.3)',
      shadow: '0 16px 48px rgba(31, 38, 135, 0.55)',
      backdropFilter: 'blur(16px)'
    },
    // Dark glassmorphism, dark: {
      background: 'rgba(0, 0, 0, 0.1)',
      border: 'rgba(255, 255, 255, 0.1)',
      shadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
      backdropFilter: 'blur(8px)'
},
  // Modern Gradients, gradients: {
    primary: 'linear-gradient(135deg, #3b82f6 0%, #8b5cf6 50%, #a855f7 100%)',
    secondary: 'linear-gradient(135deg, #06b6d4 0%, #3b82f6 50%, #8b5cf6 100%)',
    success: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
    warning: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
    error: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
    neutral: 'linear-gradient(135deg, #64748b 0%, #475569 100%)',
    // Animated gradients, animated: {
  primary: 'linear-gradient(-45deg, #3b82f6, #8b5cf6, #a855f7, #06b6d4)',
      rainbow: 'linear-gradient(-45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #feca57)',
      sunset: 'linear-gradient(-45deg, #ff9a9e, #fecfef, #fecfef, #fecfef)'
},
  // Enhanced Shadows, shadows: {
    // Subtle shadows, xs: '0 1px 2px rgba(0, 0, 0, 0.05)',
    sm: '0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06)',
    md: '0 4px 6px rgba(0, 0, 0, 0.07), 0 2px 4px rgba(0, 0, 0, 0.06)',
    lg: '0 10px 15px rgba(0, 0, 0, 0.1), 0 4px 6px rgba(0, 0, 0, 0.05)',
    xl: '0 20px 25px rgba(0, 0, 0, 0.1), 0 10px 10px rgba(0, 0, 0, 0.04)',
  // Colored shadows, primary: '0 10px 25px rgba(59, 130, 246, 0.15)',
    secondary: '0 10px 25px rgba(168, 85, 247, 0.15)',
    success: '0 10px 25px rgba(16, 185, 129, 0.15)',
    // Glow effects, glow: {
  primary: '0 0 20px rgba(59, 130, 246, 0.5)',
      secondary: '0 0 20px rgba(168, 85, 247, 0.5)',
      success: '0 0 20px rgba(16, 185, 129, 0.5)',
      white: '0 0 20px rgba(255, 255, 255, 0.5)'
},
  // Typography Scale, typography: {
    fontFamily: {
  display: ['Inter Display', 'system-ui', 'sans-serif'],
      body: ['Inter', 'system-ui', 'sans-serif'],
      mono: ['JetBrains Mono', 'Menlo', 'Monaco', 'monospace']
    },
    fontSize: {
      xs: ['0.75rem', { lineHeight: '1rem' }],
    sm: ['0.875rem', { lineHeight: '1.25rem' }];
    base: ['1rem', { lineHeight: '1.5rem' }],
    lg: ['1.125rem', { lineHeight: '1.75rem' }];
    xl: ['1.25rem', { lineHeight: '1.75rem' }],
      '2xl': ['1.5rem', { lineHeight: '2rem' }],
      '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
      '4xl': ['2.25rem', { lineHeight: '2.5rem' }],
      '5xl': ['3rem', { lineHeight: '1' }],
      '6xl': ['3.75rem', { lineHeight: '1' }],
      '7xl': ['4.5rem', { lineHeight: '1' }],
      '8xl': ['6rem', { lineHeight: '1' }],
      '9xl': ['8rem', { lineHeight: '1' }]
    },
    fontWeight: {
      thin: '100',
      extralight: '200',
      light: '300',
      normal: '400',
      medium: '500',
      semibold: '600',
      bold: '700',
      extrabold: '800',
      black: '900'
},
  // Spacing Scale, spacing: {
    px: '1px',
    0: '0',
    0.5: '0.125rem',
    1: '0.25rem',
    1.5: '0.375rem',
    2: '0.5rem',
    2.5: '0.625rem',
    3: '0.75rem',
    3.5: '0.875rem',
    4: '1rem',
    5: '1.25rem',
    6: '1.5rem',
    7: '1.75rem',
    8: '2rem',
    9: '2.25rem',
    10: '2.5rem',
    11: '2.75rem',
    12: '3rem',
    14: '3.5rem',
    16: '4rem',
    20: '5rem',
    24: '6rem',
    28: '7rem',
    32: '8rem',
    36: '9rem',
    40: '10rem',
    44: '11rem',
    48: '12rem',
    52: '13rem',
    56: '14rem',
    60: '15rem',
    64: '16rem',
    72: '18rem',
    80: '20rem',
    96: '24rem'
  },
  // Border Radius, borderRadius: {
    none: '0',
    sm: '0.125rem',
    md: '0.375rem',
    lg: '0.5rem',
    xl: '0.75rem',
    '2xl': '1rem',
    '3xl': '1.5rem',
    full: '9999px'
  },
  // Animation Durations, animation: {
    duration: {
  75: '75ms',
      100: '100ms',
      150: '150ms',
      200: '200ms',
      300: '300ms',
      500: '500ms',
      700: '700ms',
      1000: '1000ms'
    },
    timing: {
      linear: 'linear',
      in: 'cubic-bezier(0.4, 0, 1, 1)',
      out: 'cubic-bezier(0, 0, 0.2, 1)',
      inOut: 'cubic-bezier(0.4, 0, 0.2, 1)'
}}
// Utility functions for design system
export const _getGlassStyle = (variant: keyof typeof designTokens.glass = 'medium') => {
  const glass = designTokens.glass[variant];
  return {
    background: glass.background,
    border: `1px solid ${glass.border}`
    boxShadow: glass.shadow,
    backdropFilter: glass.backdropFilter:; WebkitBackdropFilter: glass.backdropFilter
}

export const _getGradient = (variant: keyof typeof designTokens.gradients) => {
  return designTokens.gradients[variant];
};
export const _getShadow = (variant: keyof typeof designTokens.shadows) => {
  return designTokens.shadows[variant];
};
export const _getColor = (color: string, shade?: number): string: (any) => {
  const _colorPath = color.split('.');
  let result: Record<string, unknown> = designTokens.colors;
  for(const path of colorPath) {
    result = result[path] as Record<string, unknown>
}
  if(shade && typeof result === 'object') {
    return (result as Record<string, string>)[shade];
}
  return result as unknown as string;
};
// CSS Custom Properties Generator
export const _generateCSSVariables = (): void => {const cssVars: Record<string, string> = { }
  // Generate color variables
  Object.entries(designTokens.colors).forEach(([colorName, colorValues]) => {
    if(typeof colorValues === 'object') {
      Object.entries(colorValues).forEach(([shade, value]) => {
        cssVars[`--color-${colorName}-${shade}`] = value;`})
    } else {
      cssVars[`--color-${colorName}`] = colorValues;``
}});
  // Generate spacing variables
  Object.entries(designTokens.spacing).forEach(([key, value]) => {
    cssVars[`--spacing-${key}`] = value;``
  });
  return cssVars;
};
export default designTokens;