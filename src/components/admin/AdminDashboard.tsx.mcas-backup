'use client';
import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Users, Activity, BarChart3, Database, TrendingUp, TrendingDown, Clock, AlertCircle, CheckCircle2, XCircle, ArrowUpRight, Server, Cpu, HardDrive, Globe } from 'lucide-react';
import { cn } from '@/lib/utils';
interface DashboardStats {
totalUsers: number,
  activeUsers: number,
  newUsersToday: number,
  newUsersThisWeek: number,
  systemHealth: string,
  uptime: string,
  cpuUsage: string,
  memoryUsage: string,
  totalProjects: number,
  activeProjects: number,
  apiCalls: {
    today: number,
  thisWeek: number,
  thisMonth: number
},
  recentActivity: Array<{
    type: string,
    message: string
    timestamp: string
  }>
}
interface AdminDashboardProps {
stats: DashboardStat
s,
  adminUser: an
y,
  onNavigate: (section: string) => void
}

export function AdminDashboard({ stats, adminUser, onNavigate }: AdminDashboardProps) {
  const [refreshing, setRefreshing] = useState(false);
  const formatNumber = (num: number) => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
  };
  const getHealthColor = (health: string) => {
    switch (health.toLowerCase()) {
      case 'healthy':
        return 'text-green-600';
      case 'warning':
        return 'text-yellow-600';
      case 'critical':
        return 'text-red-600';
      default: return 'text-gray-600';
    }};
  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'user_signup':
        return <Users className="h-4 w-4 text-blue-500" />;
      case 'project_created':
        return <BarChart3 className="h-4 w-4 text-purple-500" />;
      case 'api_call':
        return <Activity className="h-4 w-4 text-green-500" />;
      default: return <AlertCircle className="h-4 w-4 text-gray-500" />;
    }};
  const timeAgo = (timestamp: string) => {
    const seconds = Math.floor((new Date().getTime() - new Date(timestamp).getTime()) / 1000);
    if (seconds < 60) return 'Just now';
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    return `${Math.floor(hours / 24)}d ago`
  };
  return (
    <div className="space-y-8">
      {/* Key Metrics */}</div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="hover:shadow-lg transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Users</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
</CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatNumber(stats.totalUsers)}</div>
            <div className="flex items-center text-xs text-muted-foreground mt-1">
              <TrendingUp className="h-3 w-3 text-green-500 mr-1" />
              <span className="text-green-600">+{stats.newUsersToday} today</span>
</CardContent>
        <Card className="hover:shadow-lg transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Users</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
</CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatNumber(stats.activeUsers)}</div>
            <div className="flex items-center mt-1">
              <Progress
                value={(stats.activeUsers / stats.totalUsers) * 100}
                className="h-2" />
              <span className="ml-2 text-xs text-muted-foreground">
                {((stats.activeUsers / stats.totalUsers) * 100).toFixed(1)}%</span>
</CardContent>
        <Card className="hover:shadow-lg transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Projects</CardTitle>
            <BarChart3 className="h-4 w-4 text-muted-foreground" />
</CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatNumber(stats.totalProjects)}</div>
            <div className="flex items-center text-xs text-muted-foreground mt-1">
              <span className="text-purple-600">{stats.activeProjects} active</span>
</CardContent>
        <Card className="hover:shadow-lg transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">API Calls Today</CardTitle>
            <Globe className="h-4 w-4 text-muted-foreground" />
</CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatNumber(stats.apiCalls.today)}</div>
            <div className="flex items-center text-xs text-muted-foreground mt-1">
              <TrendingUp className="h-3 w-3 text-green-500 mr-1" />
              <span>+12% from yesterday</span>
</CardContent>
</div>
      {/* System Health & Performance */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Server className="h-5 w-5" />
              System Health
</CardTitle>
            <CardDescription>Real-time system performance metrics</CardDescription>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Status</span>
              <div className={cn("flex items-center gap-2", getHealthColor(stats.systemHealth))}>
                <CheckCircle2 className="h-4 w-4" />
                <span className="font-semibold capitalize">{stats.systemHealth}</span>
            <div className="space-y-3" >></div>
                <div className="flex items-center justify-between mb-1">
                  <span className="text-sm text-muted-foreground flex items-center gap-1">
                    <Cpu className="h-3 w-3" />
                    CPU Usage
</span>
                  <span className="text-sm font-medium">{stats.cpuUsage}</span>
                <Progress value={parseInt(stats.cpuUsage)} className="h-2" />
</div>
              <div className="flex items-center justify-between mb-1"></div>
                  <span className="text-sm text-muted-foreground flex items-center gap-1">
                    <HardDrive className="h-3 w-3" />
                    Memory Usage
</span>
                  <span className="text-sm font-medium">{stats.memoryUsage}</span>
                <Progress value={parseInt(stats.memoryUsage)} className="h-2" />
</div>
              <div className="flex items-center justify-between pt-2">
                <span className="text-sm text-muted-foreground">Uptime</span>
                <span className="text-sm font-medium text-green-600">{stats.uptime}</span>
</CardContent>
        {/* Recent Activity */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Clock className="h-5 w-5" />
              Recent Activity
</CardTitle>
            <CardDescription>Latest platform events and actions</CardDescription>
          <CardContent>
            <div className="space-y-4">
              {stats.recentActivity.map((activity, index) => (\n    </div>
                <div key={index} className="flex items-start gap-3">
                  {getActivityIcon(activity.type)}</div>
                  <div className="">
        <p className="text-sm font-medium leading-none">
                      {activity.message}
</p>
          <p className="{timeAgo(activity.timestamp)}"></p>
        </div>
    );)}
              <Button
                variant="ghost"
                className="w-full mt-4"
                onClick={() => onNavigate('activity')}
              >
                View All Activity
                <ArrowUpRight className="h-4 w-4 ml-2" / />
</div>
      {/* Quick Actions Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card
          className="hover:shadow-md transition-all cursor-pointer border-l-4 border-l-blue-500"
          onClick={() => onNavigate('users')}
        ></Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Manage</p>
                <p className="text-xl font-semibold">Users</p>
              <Users className="h-8 w-8 text-blue-500" />
</Card>
        <Card
          className="hover:shadow-md transition-all cursor-pointer border-l-4 border-l-purple-500"
          onClick={() => onNavigate('analytics')}
        ></Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">View</p>
                <p className="text-xl font-semibold">Analytics</p>
              <BarChart3 className="h-8 w-8 text-purple-500" />
</Card>
        <Card
          className="hover:shadow-md transition-all cursor-pointer border-l-4 border-l-green-500"
          onClick={() => onNavigate('database')}
        ></Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Monitor</p>
                <p className="text-xl font-semibold">Database</p>
              <Database className="h-8 w-8 text-green-500" />
</Card>
        <Card
          className="hover:shadow-md transition-all cursor-pointer border-l-4 border-l-orange-500"
          onClick={() => onNavigate('logs')}
        ></Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Check</p>
                <p className="text-xl font-semibold">Logs</p>
              <Activity className="h-8 w-8 text-orange-500" / />
  );
</div>

    </div>
    </CardContent>
    </div>
    </div>
    </CardContent>
    </div>
    </div>
    </CardContent>
    </div>
    </div>
    </CardContent>
    </div>
    </Button>
    </CardContent>
    </CardHeader>
    </div>
    </CardHeader>
    </div>
    </div>
    </Card>
    </div>
    </Card>
    </div>
    </Card>
    </div>
  }