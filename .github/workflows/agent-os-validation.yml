name: Agent-OS Deployment Validation

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

jobs:
  validate:
    name: Agent-OS Production Readiness Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Agent-OS Deployment Validation
        id: validation
        run: |
          echo "ü§ñ Running Agent-OS Enhanced Validation..."
          node .agent-os/scripts/deployment-validator.cjs > validation-report.txt 2>&1 || true
          cat validation-report.txt
          
          # Check if validation passed (exit code 0)
          if node .agent-os/scripts/deployment-validator.cjs; then
            echo "validation_status=passed" >> $GITHUB_OUTPUT
            echo "validation_summary=‚úÖ All Agent-OS validation checks passed" >> $GITHUB_OUTPUT
          else
            echo "validation_status=failed" >> $GITHUB_OUTPUT
            echo "validation_summary=‚ùå Agent-OS validation found issues that need attention" >> $GITHUB_OUTPUT
          fi
      
      - name: Run Hydration Boundary Check
        run: |
          echo "üîç Checking for hydration boundary issues..."
          # Check for React hooks without 'use client'
          if grep -r "useState\|useEffect" src/app --include="*.tsx" | grep -v "'use client'" | head -5; then
            echo "‚ö†Ô∏è Found potential hydration issues - components using hooks without 'use client'"
          else
            echo "‚úÖ No hydration boundary issues detected"
          fi
      
      - name: Run Build Test
        run: |
          echo "üèóÔ∏è Testing production build..."
          npm run build
      
      - name: Run Type Check
        run: |
          echo "üìã Running TypeScript validation..."
          npm run type-check
      
      - name: Run Linting
        run: |
          echo "üîß Running ESLint validation..."
          npm run lint
      
      - name: Analyze Bundle Size
        run: |
          echo "üìä Analyzing bundle size..."
          # Check if build output indicates large bundles
          if ls .next/static/chunks/*.js | xargs wc -c | tail -1 | awk '{print $1}' | perl -pe 's/(\d+)/($1 > 1000000) ? "‚ùå Bundle size > 1MB" : "‚úÖ Bundle size OK"/e'; then
            echo "Bundle analysis completed"
          fi
      
      - name: Generate Deployment Report
        if: always()
        run: |
          echo "üìÑ Generating comprehensive deployment report..."
          cat > deployment-report.md << 'EOF'
          # ü§ñ Agent-OS Deployment Analysis Report
          
          **Validation Status:** ${{ steps.validation.outputs.validation_status }}
          
          ## Summary
          ${{ steps.validation.outputs.validation_summary }}
          
          ## Build Information
          - **Framework:** Next.js 14+
          - **Platform:** Vercel
          - **Node Version:** 18.x
          - **Build Command:** `npm run build`
          
          ## Validation Checks
          - ‚úÖ Project structure validation
          - ‚úÖ Package.json configuration
          - ‚úÖ Environment setup
          - ‚úÖ Hydration boundary validation
          - ‚úÖ Import/export consistency
          - ‚úÖ Build configuration
          - ‚úÖ Vercel compatibility
          
          ## Performance Metrics
          - Build time: ~${{ job.duration }} minutes
          - Type checking: Passed
          - Linting: Passed
          - Bundle analysis: Completed
          
          ## Next Steps
          ${{ steps.validation.outputs.validation_status == 'passed' && 'üöÄ Ready for deployment!' || 'üìù Address validation issues before deploying' }}
          
          ---
          *Generated by Agent-OS Enhanced Deployment Intelligence*
          EOF
          
          cat deployment-report.md
      
      - name: Upload Validation Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: agent-os-validation-report
          path: |
            validation-report.txt
            deployment-report.md
          retention-days: 30
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let report = '';
            try {
              report = fs.readFileSync('deployment-report.md', 'utf8');
            } catch (error) {
              report = '# ü§ñ Agent-OS Deployment Analysis\n\nValidation completed with status: ${{ steps.validation.outputs.validation_status }}';
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Agent-OS Deployment Analysis')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }
      
      - name: Set Job Status
        if: steps.validation.outputs.validation_status == 'failed'
        run: |
          echo "‚ùå Agent-OS validation failed - check the report for details"
          exit 1

  deployment-readiness:
    name: Production Deployment Readiness
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Production Build Test
        run: |
          echo "üöÄ Testing production deployment readiness..."
          NODE_ENV=production npm run build
      
      - name: Environment Variable Check
        run: |
          echo "üîê Validating environment configuration..."
          # Check if .env.example exists and has required variables
          if [ -f .env.example ]; then
            echo "‚úÖ Environment example file found"
            if grep -q "NEXTAUTH_URL\|DATABASE_URL" .env.example; then
              echo "‚úÖ Key environment variables documented"
            else
              echo "‚ö†Ô∏è Consider documenting key environment variables"
            fi
          else
            echo "‚ö†Ô∏è No .env.example file found"
          fi
      
      - name: Security Audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level=moderate
      
      - name: Performance Budget Check
        run: |
          echo "‚ö° Checking performance budget..."
          # Simple bundle size check
          BUNDLE_SIZE=$(find .next/static/chunks -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
          if [ "$BUNDLE_SIZE" -gt 2000000 ]; then
            echo "‚ö†Ô∏è Bundle size ($BUNDLE_SIZE bytes) exceeds 2MB - consider optimization"
          else
            echo "‚úÖ Bundle size within performance budget"
          fi
      
      - name: Deployment Readiness Summary
        run: |
          echo "üìã PRODUCTION DEPLOYMENT READINESS SUMMARY"
          echo "=========================================="
          echo "‚úÖ Agent-OS validation passed"
          echo "‚úÖ Production build successful"
          echo "‚úÖ Security audit completed"
          echo "‚úÖ Performance check completed"
          echo ""
          echo "üöÄ Ready for Vercel deployment!"
          echo ""
          echo "Deploy with:"
          echo "  vercel --prod"
          echo ""
          echo "Or push to main branch for automatic deployment."
