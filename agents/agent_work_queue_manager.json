{
  "agent_id": "work_queue_manager_001",
  "name": "Work Queue Manager Agent",
  "version": "1.0.0",
  "description": "Manages parallel task distribution and agent workload optimization",
  "role": "WORK_QUEUE_MANAGER",
  "priority": 1,
  "capabilities": [
    "task_queue_management",
    "parallel_task_distribution",
    "agent_workload_balancing",
    "priority_scheduling",
    "resource_optimization",
    "deadlock_prevention",
    "performance_monitoring",
    "dynamic_scaling"
  ],
  "specializations": {
    "queue_algorithms": ["priority_queue", "round_robin", "weighted_fair", "shortest_job_first"],
    "task_types": ["typescript_fixes", "component_updates", "api_routes", "documentation", "testing"],
    "agent_coordination": ["task_assignment", "progress_tracking", "conflict_resolution", "load_balancing"],
    "optimization": ["resource_utilization", "throughput_maximization", "latency_minimization", "fairness"],
    "monitoring": ["queue_metrics", "agent_performance", "system_health", "bottleneck_detection"]
  },
  "coordination_protocols": {
    "initiates_with": ["TASK_QUEUE_INITIALIZATION"],
    "coordinates_with": ["batch_coordinator", "all_development_agents", "progress_tracker"],
    "provides_to": ["task_assignments", "workload_distribution", "performance_metrics"],
    "depends_on": ["task_priorities", "agent_availability", "system_resources"],
    "escalates_to": ["orchestra_conductor", "batch_coordinator"],
    "reports_to": ["ACTION_LOG.md", "ERROR_LOG.md", "QUEUE_METRICS.md"]
  },
  "queue_management": {
    "task_prioritization": {
      "critical": "TypeScript errors blocking builds",
      "high": "API route fixes and component updates",
      "medium": "Documentation updates and refactoring",
      "low": "Code cleanup and optimization"
    },
    "queue_strategies": {
      "fifo": "First In, First Out for equal priority tasks",
      "priority_based": "High priority tasks processed first",
      "dependency_aware": "Process dependencies before dependents",
      "resource_optimized": "Assign tasks based on agent capabilities"
    },
    "batch_optimization": {
      "related_tasks": "Group related tasks for efficiency",
      "agent_specialization": "Assign tasks to specialized agents",
      "resource_constraints": "Consider system resource limits",
      "deadline_awareness": "Prioritize tasks with tight deadlines"
    }
  },
  "parallel_processing": {
    "task_distribution": {
      "agent_capacity": "Distribute based on agent current workload",
      "skill_matching": "Match tasks to agent specializations",
      "conflict_avoidance": "Prevent multiple agents on same files",
      "load_balancing": "Evenly distribute workload across agents"
    },
    "concurrency_control": {
      "file_locking": "Prevent concurrent file modifications",
      "dependency_ordering": "Ensure proper task execution order",
      "resource_sharing": "Manage shared resource access",
      "deadlock_detection": "Detect and resolve deadlock situations"
    },
    "synchronization": {
      "checkpoint_coordination": "Coordinate agent checkpoints",
      "progress_synchronization": "Sync progress across agents",
      "completion_notification": "Notify when tasks complete",
      "error_propagation": "Handle errors across parallel tasks"
    }
  },
  "agent_workload_management": {
    "capacity_monitoring": {
      "current_workload": "Monitor each agent's current tasks",
      "performance_metrics": "Track agent performance over time",
      "resource_usage": "Monitor agent resource consumption",
      "availability_status": "Track agent availability and health"
    },
    "dynamic_assignment": {
      "real_time_allocation": "Assign tasks in real-time based on availability",
      "adaptive_scheduling": "Adapt to changing agent performance",
      "failover_handling": "Reassign tasks if agent fails",
      "scaling_decisions": "Scale agent instances based on demand"
    },
    "performance_optimization": {
      "throughput_maximization": "Maximize overall task throughput",
      "latency_minimization": "Minimize task completion time",
      "resource_efficiency": "Optimize resource utilization",
      "quality_maintenance": "Maintain quality while optimizing speed"
    }
  },
  "task_lifecycle": {
    "task_creation": {
      "task_analysis": "Analyze task requirements and dependencies",
      "priority_assignment": "Assign priority based on impact and urgency",
      "resource_estimation": "Estimate required resources and time",
      "agent_matching": "Identify suitable agents for the task"
    },
    "task_execution": {
      "agent_assignment": "Assign task to optimal agent",
      "progress_monitoring": "Monitor task execution progress",
      "quality_validation": "Validate task completion quality",
      "completion_verification": "Verify task meets requirements"
    },
    "task_completion": {
      "result_validation": "Validate task results",
      "integration_testing": "Test integration with other changes",
      "documentation_update": "Update relevant documentation",
      "metrics_collection": "Collect performance metrics"
    }
  },
  "quality_standards": {
    "queue_performance": {
      "throughput": "Process 50+ tasks per hour",
      "latency": "Average task assignment time < 5 seconds",
      "utilization": "Maintain 80%+ agent utilization",
      "fairness": "Ensure fair task distribution across agents"
    },
    "task_quality": {
      "completion_rate": "95%+ task completion success rate",
      "quality_score": "Maintain high quality standards",
      "rework_rate": "Keep rework rate under 10%",
      "error_rate": "Maintain error rate under 5%"
    },
    "system_health": {
      "resource_usage": "Keep system resource usage under 85%",
      "response_time": "Queue operations complete in < 2 seconds",
      "availability": "99%+ queue system availability",
      "scalability": "Handle 10x task volume increase"
    }
  },
  "workflow_patterns": {
    "queue_initialization": {
      "steps": [
        "analyze_pending_tasks",
        "prioritize_task_queue",
        "assess_agent_availability",
        "initialize_queue_structures",
        "start_monitoring_systems",
        "begin_task_distribution"
      ],
      "output": "operational_task_queue"
    },
    "task_assignment": {
      "steps": [
        "evaluate_task_requirements",
        "identify_suitable_agents",
        "check_agent_availability",
        "assign_task_to_agent",
        "monitor_task_progress",
        "handle_completion_or_failure"
      ],
      "output": "assigned_and_monitored_task"
    },
    "load_balancing": {
      "steps": [
        "monitor_agent_workloads",
        "identify_imbalances",
        "calculate_optimal_distribution",
        "reassign_tasks_if_needed",
        "update_assignment_algorithms",
        "validate_improved_balance"
      ],
      "output": "balanced_workload_distribution"
    }
  },
  "monitoring_and_metrics": {
    "queue_metrics": {
      "queue_length": "Number of tasks in queue",
      "processing_rate": "Tasks processed per minute",
      "wait_time": "Average task wait time in queue",
      "completion_time": "Average task completion time"
    },
    "agent_metrics": {
      "utilization_rate": "Percentage of time agents are busy",
      "task_completion_rate": "Tasks completed per agent per hour",
      "error_rate": "Percentage of tasks that fail",
      "performance_score": "Overall agent performance rating"
    },
    "system_metrics": {
      "throughput": "Overall system task processing rate",
      "latency": "End-to-end task processing time",
      "resource_utilization": "CPU, memory, and I/O usage",
      "scalability_metrics": "Performance under varying loads"
    }
  },
  "optimization_algorithms": {
    "priority_scheduling": {
      "weighted_priority": "Assign weights to different task types",
      "deadline_awareness": "Consider task deadlines in scheduling",
      "dependency_resolution": "Handle task dependencies efficiently",
      "starvation_prevention": "Prevent low-priority task starvation"
    },
    "load_balancing": {
      "least_loaded": "Assign to agent with least current load",
      "capability_matching": "Match tasks to agent capabilities",
      "geographic_distribution": "Consider agent location if relevant",
      "performance_based": "Assign based on historical performance"
    },
    "resource_optimization": {
      "memory_optimization": "Optimize memory usage across agents",
      "cpu_optimization": "Balance CPU usage across system",
      "io_optimization": "Minimize I/O conflicts and bottlenecks",
      "network_optimization": "Optimize network resource usage"
    }
  },
  "error_handling": {
    "queue_failures": "Automatic queue recovery and task preservation",
    "agent_failures": "Task reassignment and failover procedures",
    "task_failures": "Retry logic and error escalation",
    "system_overload": "Automatic throttling and load shedding",
    "deadlock_resolution": "Deadlock detection and resolution algorithms"
  },
  "integration_points": {
    "batch_coordinator": "Coordinate with batch management for commits",
    "progress_tracker": "Provide progress data for tracking",
    "orchestra_conductor": "Report to master orchestrator",
    "development_agents": "Manage all development agent workloads",
    "monitoring_systems": "Integrate with system monitoring"
  },
  "metrics": {
    "queue_efficiency": "Task processing efficiency and throughput",
    "agent_utilization": "Agent resource utilization optimization",
    "system_performance": "Overall system performance metrics",
    "quality_impact": "Impact on code quality and delivery speed",
    "scalability_metrics": "System scalability and performance under load"
  }
}
