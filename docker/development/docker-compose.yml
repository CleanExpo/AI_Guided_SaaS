version: '3.8'

services:
  # Main Next.js application
  app:
    build:
      context: ../..
      dockerfile: docker/development/Dockerfile.dev
    volumes:
      - ../../:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    env_file:
      - ../../.env.local
    networks:
      - ai-guided-network
    depends_on:
      - postgres
      - redis

  # PostgreSQL database (Supabase compatible)
  postgres:
    image: supabase/postgres:15.1.0.117
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ai_guided_saas
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../supabase-setup.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ../../supabase-analytics-tables.sql:/docker-entrypoint-initdb.d/02-analytics.sql
    ports:
      - "5432:5432"
    networks:
      - ai-guided-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-guided-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Agent Execution Engine
  agent-engine:
    build:
      context: ../..
      dockerfile: docker/development/agents/Dockerfile
    volumes:
      - ../../agents:/app/agents
      - ../../src/lib/agents:/app/src/lib/agents
      - agent_workspace:/workspace
    environment:
      - NODE_ENV=development
      - AGENT_WORKSPACE=/workspace
    networks:
      - ai-guided-network
    depends_on:
      - redis
      - postgres

  # Strapi CMS (for backend integration)
  strapi:
    image: strapi/strapi:4.15.5-alpine
    environment:
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: strapi
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_SSL: false
    volumes:
      - strapi_data:/srv/app
    ports:
      - "1337:1337"
    networks:
      - ai-guided-network
    depends_on:
      - postgres

  # NocoDB (for visual database management)
  nocodb:
    image: nocodb/nocodb:latest
    environment:
      NC_DB: "pg://postgres:5432?u=postgres&p=postgres&d=nocodb"
      NC_AUTH_JWT_SECRET: "569a1821-0a93-45e8-87ab-eb857f20a010"
    ports:
      - "8080:8080"
    networks:
      - ai-guided-network
    depends_on:
      - postgres

  # n8n workflow automation
  n8n:
    image: n8nio/n8n:latest
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=development
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=postgres
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - ai-guided-network
    depends_on:
      - postgres

  # MCP Server Container
  mcp-server:
    build:
      context: ../..
      dockerfile: docker/development/mcp/Dockerfile
    volumes:
      - ../../mcp:/app/mcp
      - mcp_tools:/app/tools
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - MCP_SERVER_PORT=3001
    networks:
      - ai-guided-network

  # Development tools container
  dev-tools:
    build:
      context: ../..
      dockerfile: docker/development/tools/Dockerfile
    volumes:
      - ../../:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    networks:
      - ai-guided-network
    command: tail -f /dev/null

  # Adminer for database management
  adminer:
    image: adminer:latest
    ports:
      - "8081:8080"
    networks:
      - ai-guided-network
    depends_on:
      - postgres

networks:
  ai-guided-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  agent_workspace:
  strapi_data:
  n8n_data:
  mcp_tools: