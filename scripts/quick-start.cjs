#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('🚀 Welcome to The Starter Pack Quick Setup!\n');

async function prompt(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

async function main() {
  // Check Node version
  const nodeVersion = process.version;
  const majorVersion = parseInt(nodeVersion.split('.')[0].substring(1));
  
  if (majorVersion < 20) {
    console.log(`⚠️  Node.js ${nodeVersion} detected. Node.js 20+ is recommended.`);
    console.log('   Run: nvm use 20.19.4\n');
  } else {
    console.log(`✅ Node.js ${nodeVersion} detected\n`);
  }

  // Check for .env.local
  const envPath = path.join(process.cwd(), '.env.local');
  
  if (!fs.existsSync(envPath)) {
    console.log('📋 Setting up environment variables...\n');
    
    const useDefaults = await prompt('Use default local development settings? (Y/n): ');
    
    if (useDefaults.toLowerCase() !== 'n') {
      // Create .env.local with sensible defaults
      const envContent = `# Generated by quick-start script
# Local Development Configuration

# Database (PostgreSQL)
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/starter_pack"
DIRECT_URL="postgresql://postgres:postgres@localhost:5432/starter_pack"

# NextAuth
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="${generateSecret()}"

# App Configuration
NEXT_PUBLIC_APP_URL="http://localhost:3000"
APP_NAME="My SaaS App"
NODE_ENV="development"

# Feature Flags
ENABLE_AI_FEATURES="false"
ENABLE_ANALYTICS="false"
ENABLE_EMAIL_AUTH="true"
ENABLE_ADMIN_PANEL="false"

# Optional: Add your API keys here
# OPENAI_API_KEY=""
# ANTHROPIC_API_KEY=""
# GOOGLE_CLIENT_ID=""
# GOOGLE_CLIENT_SECRET=""
`;

      fs.writeFileSync(envPath, envContent);
      console.log('✅ Created .env.local with default settings\n');
    } else {
      execSync('cp .env.example .env.local', { stdio: 'inherit' });
      console.log('✅ Created .env.local from .env.example');
      console.log('⚠️  Please update .env.local with your settings\n');
    }
  } else {
    console.log('✅ .env.local already exists\n');
  }

  // Install dependencies
  console.log('📦 Installing dependencies...');
  console.log('This may take a few minutes...\n');
  
  try {
    execSync('npm install', { stdio: 'inherit' });
    console.log('\n✅ Dependencies installed\n');
  } catch (error) {
    console.error('❌ Failed to install dependencies');
    process.exit(1);
  }

  // Database setup
  const setupDb = await prompt('Set up PostgreSQL database? (Y/n): ');
  
  if (setupDb.toLowerCase() !== 'n') {
    console.log('\n🗄️  Setting up database...');
    
    try {
      execSync('npm run db:generate', { stdio: 'inherit' });
      execSync('npm run db:push', { stdio: 'inherit' });
      console.log('\n✅ Database setup complete\n');
    } catch (error) {
      console.log('\n⚠️  Database setup failed. Make sure PostgreSQL is running.');
      console.log('   You can set it up later with: npm run setup:db\n');
    }
  }

  // Success message
  console.log('\n🎉 Setup complete!\n');
  console.log('Start the development server:');
  console.log('  npm run dev\n');
  console.log('Then open: http://localhost:3000\n');
  
  // Optional next steps
  console.log('📚 Optional next steps:');
  console.log('- Add OAuth providers in .env.local');
  console.log('- Configure AI providers for AI features');
  console.log('- Set up email service for auth');
  console.log('- Read the documentation in README.md\n');
  
  rl.close();
}

function generateSecret() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let secret = '';
  for (let i = 0; i < 32; i++) {
    secret += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return secret;
}

main().catch((error) => {
  console.error('Error:', error);
  rl.close();
  process.exit(1);
});